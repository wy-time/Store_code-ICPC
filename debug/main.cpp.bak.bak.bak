#include<iostream>
#include<cstdio>
#include<string>
#include<cstring>
#include<cmath>
#include<algorithm>
#include<queue>
#include<stack>
#include<vector>
#include<climits>
#include<map>
using namespace std;
 
#define rep(i,n) for(int i=0; i<n; i++)
#define repf(i,n,m) for(int i=(n); i<=(m); ++i)
#define repd(i,n,m) for(int i=(n); i>=(m); --i) 
#define ll long long
#define arc(a) ((a)*(a))
#define inf 100000
#define exp 0.000001
#define N 200005
string s;
string ss;
int n,m;
int sa[N*2],high[N*2],_rank[N*2],tmp[N*2],top[N*2];
int len1;
struct node{
	int cont,l;
};
int pre[N*2];
node a[N*2];
 
void makesa()
{
    memset(sa,0,sizeof(sa));
    memset(high,0,sizeof(high));
    memset(_rank,0,sizeof(_rank));
    memset(tmp,0,sizeof(tmp));
    memset(top,0,sizeof(top));
    n=s.size();
    n++;
    s[n]='$';
    int na,len;
    na=(n<256?256:n);
    memset(top,0,sizeof(top));
    rep(i,n) top[_rank[i]=s[i] & 0xff]++;
    repf(i,1,na-1) top[i]+=top[i-1];
    rep(i,n) sa[--top[_rank[i]]]=i;
    for(len=1; len<n; len<<=1)
    {
        int j;
        rep(i,n)
        {
            j=sa[i]-len;
            if(j<0) j+=n;
            tmp[top[_rank[j]]++]=j;
        }
        sa[tmp[top[0]=0]]=j=0;
        repf(i,1,n-1)
        {
            if(_rank[tmp[i]]!=_rank[tmp[i-1]] || _rank[tmp[i]+len]!=_rank[tmp[i-1]+len])
                top[++j]=i;
            sa[tmp[i]]=j;
        }
        rep(j,n+1) _rank[j]=sa[j];
        rep(j,n+1) sa[j]=tmp[j];
        if(j>=n-1) break;
    }
}
void lcp()
{
    int i,j,k;
    high[0]=0;
    j=_rank[0];
    for(i=0,k=0; i<n-1; i++,k++)
        while(k>=0 && s[i]!=s[sa[j-1]+k])
            high[j]=(k--),j=_rank[sa[j]+1];
}
 
ll work()
{
    ll sum[3],ans=0;
	int tp=0; memset(sum,0,sizeof(sum));
	repf(i,1,n)
	{
		if(high[i]<m)
		{
            memset(sum,0,sizeof(sum));
			tp=0;
			continue;
		}
		int j=tp-1;
		for(;j>=0 && a[j].cont>high[i]-m+1; --j)
		{
			sum[pre[j]]+=high[i]-m+1-a[j].cont;
			a[j].cont=high[i]-m+1;
		}
		if(sa[i-1]<=len1) pre[tp]=1;
		if(sa[i-1]>len1) pre[tp]=2;
		sum[pre[tp]]+=high[i]-m+1;
        int t;
		a[tp].cont=high[i]-m+1;
		if(sa[i]<=len1) t=1;
		if(sa[i]>len1) t=2;
		ans+=sum[3-t];
		tp++;
	}
	return ans;
}
int main()
{
    ios::sync_with_stdio(false);
    m=1;
    cin>>ss;
    ll len=ss.size();
    s=ss;
    len1=len;
    s+='$';
    string temp=ss;
    reverse(ss.begin(),ss.end());
    s+=ss;
    ss=temp;
    makesa();
    lcp();
    ll ans_rev=work();
    s=ss;
    s+='$';
    s+=ss;
    makesa();
    lcp();
    ll ans_same=work();
    ans_same-=(len*len+len)/2;
    cout<<ans_rev<<" "<<ans_same<<endl;
	return 0;
}
